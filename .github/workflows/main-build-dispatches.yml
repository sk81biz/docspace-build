name: DocSpace dispatch build

on:
  workflow_dispatch:
    inputs:
      branches:
        description: 'Branches for multiarch build (JSON array)'
        required: false
        type: string

  repository_dispatch:
    types:
      - cron-trigger-action
      - config-trigger-action
      - client-trigger-action
      - server-trigger-action


env:
  DOCKER_PATH: "/docker"
  REPO: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKER_IMAGE_PREFIX: "4testing-docspace"
  DOCKERFILE: "Dockerfile.app"

jobs:

  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        platform: 
          - linux/amd64
       #   - linux/arm64
        branch: 
          - ${{ github.event.client_payload.branches || fromJson(inputs.branches) }}
        target:
          - ${{ github.event.client_payload.targets }}

    steps:
      # - name: Checkout
      #   uses: actions/checkout@v4
      #   with:
      #     ref: ${{ matrix.branch }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Free Disk Space
        run: |
          curl -fsSL https://raw.githubusercontent.com/apache/arrow/refs/heads/main/ci/scripts/util_free_space.sh | bash
          sudo docker image prune --all --force

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Print payload variables
        run: |
          echo "Branches: ${{ github.event.client_payload.branches || fromJson(inputs.branches) }}"
          echo "Targets info: ${{ github.event.client_payload.targets }}"
          echo "Matrix branch: ${{ matrix.branch }}"

      # - name: Set environment variable
      #   run: | 
      #       echo "TARGET=${{ github.event.client_payload.targets }}" >> $GITHUB_OUTPUT
      #       echo "GIT_BRANCH=${{ github.event.client_payload.branches || fromJson(inputs.branches) }}" >> $GITHUB_OUTPUT
      - name: Preparing environments vars
        id: prepare
        run: |
          if [ "${{ github.GITHUB_REF_NAME }}" = "develop" ]; then
            PRODUCT_VERSION="develop"
            DOCKER_TAG=${PRODUCT_VERSION}.${{ github.run_number }}
          else
            PRODUCT_VERSION=$(echo "${{  github.GITHUB_REF_NAME }}" | sed '/^release\b\|^hotfix\b\|^feature\b/s/release.*\/\|hotfix.*\/\|feature.*\///; s/-git-action$//; s/^v//') 
            DOCKER_TAG=${PRODUCT_VERSION}.${{github.run_number}}
          fi
         
          # echo "DOCKER_TAG=${DOCKER_TAG}" >> ${GITHUB_ENV}
          echo "DOCKER_TAG=develop.${{ github.run_number }}" >> ${GITHUB_ENV}
        shell: bash
 
      - name: Build with target
        if: ${{ matrix.target != '' }}
        run: | 
            pwd
            ls -la
            cd .${DOCKER_PATH}
            docker build \
            --file ${DOCKERFILE} \
            --target ${{ matrix.target }} \
            --build-arg GIT_BRANCH=${{ matrix.branch }} \
            --build-arg BUILD_NUMBER=${BUILD_NUMBER} \
            -t ${REPO}/${DOCKER_IMAGE_PREFIX}-site-core:${DOCKER_TAG} \
            --push \
            .
        shell: bash
      # 
      
      #- name: Build 4testing
      #   id: build
      #   run: |
      #     echo ${REPO}
      #     cd .${DOCKER_PATH}
      #     if [ "${{ github.GITHUB_REF_NAME }}" = "develop" ]; then
      #       PRODUCT_VERSION="develop"
      #       DOCKER_TAG=${PRODUCT_VERSION}.${{ github.run_number }}
      #     else
      #       PRODUCT_VERSION=$(echo "${{  github.GITHUB_REF_NAME }}" | sed '/^release\b\|^hotfix\b\|^feature\b/s/release.*\/\|hotfix.*\/\|feature.*\///; s/-git-action$//; s/^v//') 
      #       DOCKER_TAG=${PRODUCT_VERSION}.${{github.run_number}}
      #     fi
      #     DOCKER_TAG=develop.${{ github.run_number }}
      #     export DOCKER_TAG
      #     if [ -n ${TARGET} ]; then
      #       docker build \
      #       --file ${DOCKERFILE} \
      #       --target ${{ env.TARGET }} \
      #       --build-arg GIT_BRANCH=${{ env.GIT_BRANCH }} \
      #       --build-arg BUILD_NUMBER=${BUILD_NUMBER} \
      #       -t ${REPO}/${DOCKER_IMAGE_PREFIX}-site-core:${DOCKER_TAG} \
      #       --push \
      #       .
      #     else
      #      docker buildx bake -f build.yml \
      #      --set *.args.GIT_BRANCH=${{ env.GIT_BRANCH }} \
      #      --set *.args.PRODUCT_VERSION=${PRODUCT_VERSION} \
      #      --set *.args.BUILD_NUMBER=${BUILD_NUMBER} \
      #      --set *.platform=${{ matrix.platform }} \
      #      --push

      #       echo "version=${DOCKER_TAG}" >> "$GITHUB_OUTPUT"
      #     fi 
      #   shell: bash
      
      
      
      
      
      #     echo "version=${DOCKER_TAG}" >> "$GITHUB_OUTPUT"
      #   shell: bash
    

     
      # docker buildx bake -f build.yml \
      #     --set *.args.GIT_BRANCH=${{ github.GITHUB_REF_NAME }} \
      #     --set *.args.PRODUCT_VERSION=${PRODUCT_VERSION} \
      #     --set *.args.BUILD_NUMBER=${BUILD_NUMBER} \
      #     --set *.platform=${{ matrix.platform }} \
      #     --set *.platform=${{ matrix.platform }} \
      #     --set *.args.PRODUCT_VERSION=${PRODUCT_VERSION} \
      #     --set *.args.BUILD_NUMBER=${{github.run_number}} \
      #     --push

      #     echo "version=${DOCKER_TAG}" >> "$GITH
